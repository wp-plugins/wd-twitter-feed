/**
 * Tweeter Feed namespace
 */
function TwitterFeed() {}

jQuery(document).ready(function ($) {

TwitterFeed.settings = {
    popUpWidth:  700,
    popUpHeight: 345
};

TwitterFeed.init = function() 
{
    // Bind onclick tweet actions
    $('.atf-web-intent').each(function() {
        $(this).click(function(e) {
            e.preventDefault(); // Prevent the link from being opened
            newwindow = window.open(
                this.getAttribute("href"),
                this.getAttribute("title"),
                'height=' + TwitterFeed.settings.popUpHeight + ',width=' + TwitterFeed.settings.popUpWidth
            );

            // Focus
            if(window.focus) { newwindow.focus(); }

            // Centralize the popup window
            newwindow.moveTo((screen.width-TwitterFeed.settings.popUpWidth)/2,(screen.height-TwitterFeed.settings.popUpHeight)/2);
            return false;
        });
    });

    // Show hide media
    $('.atf-show-media-button').click(function(e) {
        e.preventDefault();
        var tweet = $(this).parent();
        tweet.find('.atf-media-wrapper').toggle(300, function(){
            var el = tweet.find('.atf-show-media-button > span');
            var text = el.text() === 'Show' ? 'Hide' : 'Show';
            el.text(text);
        });
    });

    // Hide debug window onclick
    $('#twitter-feed-debug-window .close-button').click(function() {
        $('#twitter-feed-debug-window').hide();
    });
};

TwitterFeed.ToolTip = function( wrapper )
{
    this.wrapper    = $(wrapper);
    this.text       = this.wrapper.attr('title');
    this.el         = this.createTooltip(this.text);
    this.delay      = 300;
    this.arrowWidth = 5;
    this.top        = 0; // Calculated after the element is created
    this.timer;
    
    this.init();
};

TwitterFeed.ToolTip.prototype.init = function()
{
    var self = this;
    
    this.wrapper.css({position:'relative'});
    
    this.wrapper.hover(
        function(){self.mouseover()},
        function(){self.mouseout()}
    );
};

TwitterFeed.ToolTip.prototype.createTooltip = function( text )
{
    var el    = $('<div></div>'),
        inner = $('<div></div>');
    
    
    el.addClass('atf-tooltip');
    inner.addClass('atf-tooltip-inner');
    inner.html(text);
    el.append(inner);
    
    return el;
};

TwitterFeed.ToolTip.prototype.mouseover = function()
{
    clearTimeout(this.timer);
    this.wrapper.append(this.el);

    if( this.top === 0 )
    {
        this.top = -(this.el.outerHeight() + this.arrowWidth);
    }
    
    this.el.addClass('visible');
    this.el.css({
        top: this.top
    });
};

TwitterFeed.ToolTip.prototype.mouseout = function()
{
    var self = this;
    this.timer = setTimeout(function() 
    {
        self.el.removeClass('visible');
        self.el.remove();
    }, this.delay);
};

// Set tooltips
$('.atf-web-intent').each(function(){
    new TwitterFeed.ToolTip( this );
});
/**
 * Scrolling Tweets
 * 
 * @param {type} el The element to be converted to a scroller
 */
TwitterFeed.ScrollingTweets = function( el )
{
    this.el = el;
    this.slides = $(el).find('.atf-tweet-wrapper');
    this.slide_count = this.slides.length;
    this.slide_duration = parseInt($(el).attr('data-scroll-time')) * 1000;
    
    // Hide slides
    $(this.slides).each(function(i,e){
        $(this).hide();
    });
    
    // Show the first slide
    this.showSlide(0);
    this.scrollText(0, 1000);
    
    // Play the slide show from slide 1
    this.play(1);
};

/**
 * Show Slide
 * 
 * Show the slide from the slides array with
 * the given index 'slide_num' and hide the previous
 * slide.
 * 
 * @param {int}        slide_num    The number of the
 *                                slide to show
 */
TwitterFeed.ScrollingTweets.prototype.showSlide = function(slide_num) 
{    
    // Hide the previous slide and show the requested one
    $(this.slides[this.current_slide]).hide();
    $(this.slides[slide_num]).fadeIn(200);
    
    // Update current slide number
    this.current_slide = slide_num;
    
};

/**
 * Scroll Text
 * 
 * If the width of the textnode is greater than the
 * width of its wrapper, this will scroll the text
 * from right to left.
 * 
 * @param {int}        slide_num        The number of the
 *                                    slide to show
 * @param {int}        scroll_delay    The delay to 
 *                                    start scrolling 
 *                                    in milliseconds
 */
TwitterFeed.ScrollingTweets.prototype.scrollText = function(slide_num, scroll_delay) 
{
    // Variables
    var child       = $(this.slides[slide_num]).find('p');
    var child_width = $(child).width();
    var wrapper     = $(this.slides[slide_num]).find('.atf-tweet-text');
    var wrapper_width = $(wrapper).width();
    var diff        = child_width - wrapper_width;
    
    // Zero the absolute position of the text
    $(child).css('left',0);
    
    // The text size exceeds the wrapper size
    if(diff > 0) {
        $(child).delay(scroll_delay).animate({ 
            left: "-=" + diff,
        }, 
        // Use the difference to set the time, so that 
        // the scrolling time is the same regardless 
        // of the width of the text node 
        diff*10 );
    }
};


/**
 * Play
 * 
 * Play the slideshow and scroll the text
 * of each slide.
 * 
 * @param {int}        slide_num        The number of the
 *                                    slide to start playing
 *                                    from.
 */
TwitterFeed.ScrollingTweets.prototype.play = function(slide_num) 
{
    var scroller = this;
    var i = slide_num;
    
    // Make sure the slide is within the array boundaries
    if(i >= this.slide_count)
        i = 0;
    
    interval = setInterval(function(){
        scroller.showSlide(i);
        scroller.scrollText(i++, 1000);
        if(i === scroller.slide_count)
            i = 0;
    }, this.slide_duration);
};

$('.atf-scrolling-tweets').each(function(){
    new TwitterFeed.ScrollingTweets( this );
});
/**
 * Sliding Tweets
 * 
 * @param {Node} el The element to be converted to a slider
 */
TwitterFeed.SlidingTweets = function( el ) 
{
    this.el = el;
    this.slides = $(el).find('.atf-tweet-padder');
    this.slide_count = this.slides.length;
    this.slide_duration = parseInt($(el).attr('data-slide-duration')) * 1000;
    this.slide_direction = $(el).attr('data-slide-dir');
    this.slider_width = $(el).width();
    this.slider_height = $(el).height();
    
    this.init();
}

/**
 * Initiate the slider
 */
TwitterFeed.SlidingTweets.prototype.init = function() 
{
    // Hide slides
    $(this.slides).each(function(i,e){
        $(this).hide();
    });
    
    // Show the first slide
    this.show_slide(0);
    
    // Play the slide show from slide 1
    if(this.slide_count > 1)
        this.play(1);
    
    // Fix width/height on window resize
    var self = this;
    $(window).resize(function(){
        self.adjust_view();
    });
};

/**
 * Show Slide
 * 
 * Show the slide from the slides array with
 * the given index 'slide_num' and hide the previous
 * slide.
 * 
 * @param {int}        slide_num    The number of the
 *                                slide to show
 */
TwitterFeed.SlidingTweets.prototype.show_slide = function(slide_num) 
{
    // There is no slide visible currently
    if(typeof this.current_slide === 'undefined')
    {
        $(this.slides[slide_num]).show();
    }
    
    // Hide the previous slide and show the requested one
    else 
        this.transition(this.slides[this.current_slide], this.slides[slide_num]);
    
    // Update current slide number
    this.current_slide = slide_num;
    this.adjust_view();
};

/**
 * Fix the visual appearance of the given slide.
 */
TwitterFeed.SlidingTweets.prototype.adjust_view = function() 
{
    var slide = $(this.slides[this.current_slide]),
        height = slide.outerHeight(),
        width = slide.outerWidth();
    $(this.el).height( height );
    this.slider_width = width;
    this.slider_height = height;
};

/**
 * Transition
 * 
 * Animate a transition between two slides.
 * 
 * @param    {DOM element}    slide1 The current slide
 * @param    {DOM element}    slide2 The new slide
 */
TwitterFeed.SlidingTweets.prototype.transition = function(slide1, slide2)
{    
    // Vars
    var pool = new Array('up','down','left','right');
    var anim1, anim2, css2;
    var dir = this.slide_direction;
    var reset_position = {top:'',left:'',bottom:'',right:''};
    
    // Randomize direction
    if(dir === 'random') 
    {
        var index = Math.floor(Math.random() * 4)
        dir = pool[index];
    }
    
    // Set the animation properties according to the direction
    switch(dir) 
    {
        case 'up':
            anim1 = {top : '-' + this.slider_height};
            anim2 = {top : 0};
            css2 = {top : this.slider_height};
            break;
        case 'down':
            anim1 = {bottom : '-' + this.slider_height};
            anim2 = {bottom : 0};
            css2 = {bottom : this.slider_height};
            break;
        case 'left':
            anim1 = {left : '-' + this.slider_width};
            anim2 = {left : 0};
            css2 = {left : this.slider_width};
            break;
        case 'right':
            anim1 = {right : '-' + this.slider_width};
            anim2 = {right : 0};
            css2 = {right : this.slider_width};
            break;
    }
    
    // Animate current slide
    $(slide1).animate(
        anim1,
        1000,
        function() {
            $(this).hide().css(reset_position);
        }
    );
        
    // Animate new slide
    $(slide2)
        .css(css2)
        .show()
        .animate(anim2,1000,function(){
            $(this).css(reset_position);
        });
};

/**
 * Play
 * 
 * Play the slideshow and scroll the text
 * of each slide.
 * 
 * @param {int}        slide_num        The number of the
 *                                    slide to start playing
 *                                    from.
 */
TwitterFeed.SlidingTweets.prototype.play = function(slide_num) 
{
    var Slider = this;
    var i = slide_num;
    
    // Make sure the slide is within the array boundaries
    if(i >= this.slide_count)
        i = 0;
    
    interval = setInterval(function(){
        Slider.show_slide(i++);
        if(i === Slider.slide_count)
            i = 0;
    }, this.slide_duration);
};

$('.atf-sliding-tweets').each(function(){
    new TwitterFeed.SlidingTweets( this );
});
    TwitterFeed.init();

});